# Standard/External modules
import sys
import logging.config

# Custom/Internal Modules
import exceptions
from services import ec2_services
from services import hsm_services
from services import ssm_services
import automation_config as config


logging.config.fileConfig('logging.conf', disable_existing_loggers=False)
logger = logging.getLogger(__name__)


def provision_cluster():
    try:
        # create cloudhsm cluster
        cluster_details = create_hsm_cluster()
        # store the hsm cluster id in SSM for future reference
        ssm_services.create_hsm_cluster_id_param(cluster_details["hsm_cluster_id"])

    except exceptions.SsmParameterNotFoundError as err:
        logger.error(err)
        logger.error("SSM parameter required for cluster creation.")
        sys.exit(1)
    except exceptions.HsmSubnetsNotFoundError as err:
        logger.error(err)
        logger.error("HSM subnets with associated tags required for cluster creation.")
        sys.exit(1)
    except Exception as err:
        logger.error(err)
        sys.exit(1)


def create_hsm_cluster():
    # The hsm cluster sg name is autogenerated during cluster creation so set up a template
    # with the naming convention for later substitution - if Amazon change the convention we
    # can change it here. Required for the describe_security_groups() api call.
    hsm_cluster_sg_name_template = "cloudhsm-{cluster_id}-sg"
    vpc_id = ssm_services.get_hsm_vpc_id()

    # Check if a CloudHSM cluster exists before proceeding - this script only supports one per VPC.
    logger.info("Checking if HSM clusters already exist in VPC: {}".format(vpc_id))
    cluster_details = hsm_services.get_hsm_clusters_by_vpc_id(vpc_id)
    if len(cluster_details["Clusters"]) > 0:
        raise exceptions.ClusterPreExistsError("HSM cluster(s) already exist in VPC: {}. "
                                               "Delete all HSM clusters before running this script.".format(vpc_id))
    logger.info("HSM clusters check complete. Continuing.")

    # Get only HSM enabled subnets - those tagged by Cloudformation or manually.
    subnet_details = ec2_services.get_hsm_enabled_subnets()

    logger.info("HSM cluster will be created across the following subnets: {}".format(subnet_details["subnet_ids"]))
    cluster_details = hsm_services.create_cluster(config.hsm_type, subnet_details["subnet_ids"])
    logger.info("HSM cluster creation initiated.")

    # Wait for cluster creation to complete - this can take up to 5 minutes.
    logger.info("Waiting for cluster creation to complete.")
    hsm_services.wait_for_cluster_create_complete()
    logger.info("HSM cluster created successfully.")
    logger.info("HSM cluster Id: {}".format(cluster_details["cluster_id"]))

    # Generate cluster security group name so we can use it later for configuring EC2 to HSM connectivity.
    hsm_cluster_sg_name = hsm_cluster_sg_name_template.format(cluster_id=cluster_details["cluster_id"])
    logger.info("Autogenerated HSM cluster security group name: {}".format(hsm_cluster_sg_name))

    return {
        "hsm_cluster_id": cluster_details["cluster_id"],
        "hsm_cluster_sg_name": hsm_cluster_sg_name,
        "subnet_details": subnet_details
    }


if __name__ == '__main__':
    provision_cluster()
